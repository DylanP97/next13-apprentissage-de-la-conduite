// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  answers       Json
  correctAnswer Int?
  imageUrl      String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blogId    String?
  posterId  String?
  title     String?
  category  String?
  tags      Json
  slug      String?
  data      Json
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment Comment[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  commenterId String   @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogId      String   @db.ObjectId

  blog      Blog @relation(fields: [blogId], references: [id])
  commenter User @relation(fields: [commenterId], references: [id])
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String?
  lastName             String?
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  hashedPassword       String?
  resetPasswordToken   String?   @unique
  resetPasswordExpires Int?
  image                String?
  isAdmin              Boolean   @default(false)
  isAccepted           Boolean   @default(false)
  isSubscribed         Boolean   @default(false)
  subscriptionPlan     Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts Account[]
  Comment  Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
